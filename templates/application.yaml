{{- $tplApps := ( tpl (.Values.apps_tpl_string | default "null" ) .)  -}}


{{ $appsDictTpl := dict }}
{{- range $parentKey, $dict := .Values.apps_dict_tpl }}
  {{ $newApps := dict }}
  {{- range $subKey, $subValue := $dict }}
    {{- if $.Values.apps_dict_tpl_no_gen_id }}
    {{ $hashedKey := printf "%s" $subKey }}
    {{- else }}
    {{ $hashedKey := printf "%s-%s" $subKey (adler32sum $parentKey) }}
    {{- end }}
    {{ $newApps = merge $newApps (dict $hashedKey $subValue) }}
    

  {{- end }}
  {{ $appsDictTpl = merge $appsDictTpl $newApps }}
{{- end }}


{{ $appsDict := dict }}
{{- range $parentKey, $dict := .Values.apps_dict }}
  {{ $newApps := dict }}
  {{- range $subKey, $subValue := $dict }}
    {{ $hashedKey := printf "%s-%s" $subKey (adler32sum $parentKey) }}
    {{ $newApps = merge $newApps (dict $hashedKey $subValue) }}
  {{- end }}
  {{ $appsDict = merge $appsDict $newApps }}
{{- end }}



{{- $appsMerged := merge (.Values.apps | default (dict) ) ($appsDict) (fromYaml $tplApps ) ($appsDictTpl )  -}}
{{ range $appKey, $app := $appsMerged }}
  {{- if ne $app nil }}
    {{- if or (not $app.condition) (and $app.condition (eq "true" (tpl (printf "{{%s}}" $app.condition) $))) }}
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: {{ $.Values.base.prefix_name_application | default "" }}{{ if (hasKey $app "metadata") }}{{$app.metadata.name | default ($appKey) }}{{- else }}{{ $appKey }}{{ end }}
  namespace: {{ if (hasKey $app "metadata") }}{{$app.metadata.namespace}}{{- else }}{{ default $.Values.base.metadata.namespace | default "argocd" }}{{ end }}
  annotations:
    {{- if (hasKey $app "metadata") }}{{- $app.metadata.annotations | default (dict) | toYaml | nindent 4 }}{{- else }}{{ dict | toYaml | nindent 4  }}{{ end }} 
  labels:
    {{- if (hasKey $app "metadata") }}{{- $app.metadata.labels | default (dict) | toYaml | nindent 4 }}{{- else }}{{ dict | toYaml | nindent 4  }}{{ end }} 
{{- if $app.force }}
operation:
  sync:
    syncStrategy:
      hook:
        force: true
{{- end }}
spec:
  ignoreDifferences:
    {{- $app.spec.ignoreDifferences | default $.Values.base.spec.ignoreDifferences | default (list) | toYaml | nindent 4 }}
  {{- if $app.spec.source }} 
  source:
    {{- $source := $app.spec.source }}
    repoURL: {{ tpl $source.repoURL $  }}
    path: {{ tpl ($source.path| default "null") $ }}
    chart: {{ tpl ($source.chart| default "null") $ }}
    targetRevision: {{ tpl $source.targetRevision $ }}
    plugin:
      {{- $source.plugin  | toYaml | nindent 8 }}
    {{- if $source.helm }}
    helm:
      valueFiles:
        {{- $source.helm.valueFiles | default (list) | toYaml | nindent 10 }}
      values: |
        {{- tpl ( $source.helm.values | default "" | toString ) $ | nindent 10 }}
      valuesObject:
        {{- tpl (toYaml $source.helm.valuesObject ) $ | nindent 10 }}
      parameters:
        {{- $source.helm.parameters | toYaml | nindent 10 }}
    {{- end }}
    ref: {{ $source.ref | default "null" }}   
  {{- end }} 
  {{- if $app.spec.sources }}  
  sources:
    {{- range $sources := $app.spec.sources }}
    - repoURL: {{ tpl $sources.repoURL $  }}
      path: {{ $sources.path | default "null" }}
      chart: {{ $sources.chart | default "null" }}
      targetRevision: {{ $sources.targetRevision }}
      plugin:
        {{- $sources.plugin  | toYaml | nindent 8 }}
     {{- if $sources.helm }}
      helm:
        valueFiles:
          {{- $sources.helm.valueFiles | default (list) | toYaml | nindent 10 }}
        values: |
          {{- tpl ( $sources.helm.values | default "" | toString ) $ | nindent 10 }}
        valuesObject:
          {{- $sources.helm.valuesObject | toYaml | nindent 10 }}
        parameters:
          {{- $sources.helm.parameters | toYaml | nindent 10 }}
      {{- end }}
      ref: {{ $sources.ref | default "null" }}   
    {{- end }}
  {{- end }} 
  project:  {{ $app.spec.project | default ($.Values.base.spec.project) | default ("default") }}
  destination:
    server: {{ if and (hasKey $app.spec "destination") (hasKey $app.spec.destination "server")}}{{$app.spec.destination.server}}{{- else }}{{ $.Values.base.spec.destination.server }}{{ end }}
    namespace: {{ if and (hasKey $app.spec "destination") (hasKey $app.spec.destination "namespace")}}{{$app.spec.destination.namespace}}{{- else }}{{ if and (hasKey $.Values.base.spec "destination") (hasKey $.Values.base.spec.destination "namespace")}}{{ $.Values.base.spec.destination.namespace }}{{- else }}{{ if (hasKey $app "metadata") }}{{$app.metadata.name}}{{- else }}{{ $appKey }}{{ end }}{{ end }}{{ end }}
  syncPolicy:
    {{- $defaultSyncPolicy := dict "automated" (dict "prune" true "selfHeal" true) "syncOptions" (list "CreateNamespace=true") }}
    {{- $SyncPolicy := merge $defaultSyncPolicy ($app.spec.syncPolicy | default $.Values.base.spec.syncPolicy | default (dict) )  }}
    {{- $SyncPolicy | toYaml | nindent 4 }}
    {{- end }}
  {{- end }}
{{- end }}
