{{ define "Application" -}}
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  {{ $baseMetadata := (($.Values).base).metadata }}
  name: {{ print ($baseMetadata.prefix_name | default "" .appKey ) }}
  namespace: {{ $baseMetadata.namespace | default "argocd"  }}
{{ if .app.force}}
operation:
  sync:
    syncStrategy:
      hook:
        force: true
{{- end }}
spec:
  {{ $baseSpec := (($.Values).base).spec }}
  project: {{ $baseSpec.project | default "default" }}
  destination:
    server: {{ ($baseSpec.destination).server | default ("https://kubernetes.default.svc")  }}
    namespace: {{ ($baseSpec.destination).server | default (.app.metadata).name | default .appKey}}
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - "CreateNamespace=true"
        
{{ end }}

{{ define "ValuesTpl" -}}
spec:
  {{ $helm := (((.app).spec).source).helm }}
  {{- if $helm }}
  source:
    helm:
      {{- if $helm.valuesObjects }}
      valuesObjects:
        {{- tpl (toYaml $helm.valuesObjects ) $ | nindent 8 }}
      {{ end}}
      {{- if $helm.values }}
      values: |
        {{- tpl ( $helm.values ) $ | nindent 8 }}
      {{ end}}
  {{ end}}


  {{- if (((.app).spec).sources) }}
  sources:
    {{- range $key, $sources := .app.spec.sources }}
    {{ $helm := $sources.helm }}
    {{- if $helm.valuesObjects }}
    {{ $test := dict "helm" (dict "valuesObjects" (fromYaml (tpl (toYaml $helm.valuesObjects ) .) ) ) }}
    {{ $sources = merge $test $sources }}
    {{- end }}

    {{- if $helm.values }}
    {{ $test := dict "helm" (dict "values"  (tpl ($helm.values ) .) )  }}
    {{ $sources = merge $test $sources }}
    {{- end }}

    - {{ toYaml $sources | nindent 6 }}
    {{ end}}
  {{ end}}
{{ end }}


{{- $tplApps := ( tpl (.Values.apps_tpl_string | default "null" ) .)  -}}

{{ $appsDictTpl := dict }}
{{- range $parentKey, $dict := .Values.apps_dict_tpl }}
  {{ $newApps := dict }}
  {{- range $subKey, $subValue := $dict }}
    {{ $hashedKey := printf "%s" $subKey }}
    {{- if or $.Values.apps_dict_tpl_gen_id  $subValue.gen_id }}
    {{ $hashedKey := printf "%s-%s" $subKey (adler32sum $parentKey) }}
    {{- end }}
    {{ $newApps = merge $newApps (dict $hashedKey $subValue) }}
    

  {{- end }}
  {{ $appsDictTpl = merge $appsDictTpl $newApps }}
{{- end }}


{{ $appsDict := dict }}
{{- range $parentKey, $dict := .Values.apps_dict }}
  {{ $newApps := dict }}
  {{- range $subKey, $subValue := $dict }}
    {{- if or $.Values.apps_dict_tpl_gen_id  $subValue.gen_id }}
    {{ $hashedKey := printf "%s-%s" $subKey (adler32sum $parentKey) }}
    {{- end }}
    {{ $hashedKey := printf "%s" $subKey }}
    {{ $newApps = merge $newApps (dict $hashedKey $subValue) }}
  {{- end }}
  {{ $appsDict = merge $appsDict $newApps }}
{{- end }}



{{- $appsMerged := merge (.Values.apps | default (dict) ) ($appsDict) (fromYaml $tplApps ) ($appsDictTpl )  -}}
{{ range $appKey, $app := $appsMerged }}
  {{- if ne $app nil }}
    {{- if or (not $app.condition) (and $app.condition (eq "true" (tpl (printf "{{%s}}" $app.condition) $))) }}
---
{{ $Application := fromYaml (include "Application" (dict "appKey" $appKey "app" $app ) ) -}}
{{ $ValuesTpl := fromYaml (include "ValuesTpl" (dict "app" $app ) ) -}}
{{- $Application := merge $ValuesTpl $app $Application   -}}
{{ toYaml $Application }}

    {{- end }}
  {{- end }}
{{- end }}
