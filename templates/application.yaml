{{ define "Application" -}}
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: {{ print ( $.Values.base.prefix_name_application | default "" .appKey ) }}
  namespace: {{ $.Values.base.metadata.namespace | default "argocd"  }}
  project: {{ $.Values.base.spec.project | default ("default") }}
{{ if .app.force}}
operation:
  sync:
    syncStrategy:
      hook:
        force: true
{{- end }}
spec:
  destination:
    server: {{ $.Values.base.spec.destination.server | default ("https://kubernetes.default.svc")  }}
    namespace: {{ $.Values.base.spec "destination" | default .app.metadata.name | default .appKey}}

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - "CreateNamespace=true"
{{- if .app.spec.source.helm.valuesObject -}}
  source:
    helm:
      valuesObjectsZ:
        {{- tpl (toYaml .app.spec.source.helm.valuesObject ) $ | nindent 10 }}
        
{{ end}}




{{- $tplApps := ( tpl (.Values.apps_tpl_string | default "null" ) .)  -}}

{{ $appsDictTpl := dict }}
{{- range $parentKey, $dict := .Values.apps_dict_tpl }}
  {{ $newApps := dict }}
  {{- range $subKey, $subValue := $dict }}
    {{ $hashedKey := printf "%s" $subKey }}
    {{- if or $.Values.apps_dict_tpl_gen_id  $subValue.gen_id }}
    {{ $hashedKey := printf "%s-%s" $subKey (adler32sum $parentKey) }}
    {{- end }}
    {{ $newApps = merge $newApps (dict $hashedKey $subValue) }}
    

  {{- end }}
  {{ $appsDictTpl = merge $appsDictTpl $newApps }}
{{- end }}


{{ $appsDict := dict }}
{{- range $parentKey, $dict := .Values.apps_dict }}
  {{ $newApps := dict }}
  {{- range $subKey, $subValue := $dict }}
    {{- if or $.Values.apps_dict_tpl_gen_id  $subValue.gen_id }}
    {{ $hashedKey := printf "%s-%s" $subKey (adler32sum $parentKey) }}
    {{- end }}
    {{ $hashedKey := printf "%s" $subKey }}
    {{ $newApps = merge $newApps (dict $hashedKey $subValue) }}
  {{- end }}
  {{ $appsDict = merge $appsDict $newApps }}
{{- end }}



{{- $appsMerged := merge (.Values.apps | default (dict) ) ($appsDict) (fromYaml $tplApps ) ($appsDictTpl )  -}}
{{ range $appKey, $app := $appsMerged }}
  {{- if ne $app nil }}
    {{- if or (not $app.condition) (and $app.condition (eq "true" (tpl (printf "{{%s}}" $app.condition) $))) }}
---
{{ $Application := fromYaml (include "Application" (dict "appKey" $appKey "app" $app ) ) -}}
{{- $Application := merge $app $Application   -}}
{{ toYaml $Application }}
    {{- end }}
  {{- end }}
{{- end }}
